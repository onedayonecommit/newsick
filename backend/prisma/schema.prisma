// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// [] 처리 된건 관계형 만든거라 안봐도댐
model users{
  id Int @default(autoincrement()) @id
  user_email String @unique
  user_wallet_address String @unique
  user_name String @unique
  user_profile_image String @default("default_profile_image.png")
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  creator creator[]
  ticket ticket[]
  heart_music heart_music[]
  heart_funding heart_funding[]
  playlist playlist[]
  fundinglist funding[]
  pendinglist pending_creator[]
}

model pending_creator{
  id Int @default(autoincrement()) @id
  user_ids users @relation(fields: [user_id],references: [id])
  user_id Int
  creator_info String @db.VarChar(5000)
  pending_status Boolean @default(false)
}
model creator{
  creators_id user @relation(fields : [creator_id],references: [user_wallet_address])
  creator_id String @id
  is_creator Boolean @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  funding funding[]
}

model ticket{
  ids user @relation(fields: [id],references: [user_wallet_address])
  id String @id
  ticket_type Int @default(0)
  expired DateTime @default(now()) @db.Timestamp(3)
}

model funding{
  id Int @default(autoincrement()) @id
  creator_idss users @relation(fields: [creator_id],references: [id])
  creator_id Int
  creator_wallet_address String
  category String?
  music_feel Int @default(0)
  funding_cover_image String @default("default_profile_image.png")
  funding_info String @db.VarChar(10000)
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  funding_music_player funding_music_player[]
}

model funding_music_maker{
  id Int @default(autoincrement()) @id
  funding_ids funding @relation(fields: [funding_id],references: [id])
  funding_id Int
  name String?
  sex String?
  age Int?
  about_me String? @db.VarChar(3000)
  music_maker_info_url String? @db.VarChar(300) // sns or info
}

model normal_music{
  id Int @default(autoincrement()) @id
  funding_ids funding @relation(fields: [funding_id],references: [id])
  funding_id Int
  name String?
  sex String?
  age Int?
  about_me String? @db.VarChar(3000)
  lyrics_maker_info_url String? @db.VarChar(300)// sns or info
}

model funding_singer{
  id Int @default(autoincrement()) @id
  funding_ids funding @relation(fields: [funding_id],references: [id])
  funding_id Int
  name String?
  sex String?
  age Int?
  about_me String? @db.VarChar(3000)
  singer_info_url String? @db.VarChar(300)
}

model heart_music{
  id Int @default(autoincrement()) @id
  user_ids user @relation(fields: [user_id],references: [user_wallet_address])
  user_id String
  normal_music_id Int?
  funding_music_id Int?
}

model playlist{
  id Int @default(autoincrement()) @id
  user_ids user @relation(fields: [user_id],references: [user_wallet_address])
  user_id String
  normal_music_id Int?
  funding_music_id Int?
}

model heart_funding{
  id Int @default(autoincrement()) @id
  user_ids user @relation(fields: [user_id],references: [user_wallet_address])
  user_id String 
  funding_id Int
}